name: Windows

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  msvc2019-ctest:
    runs-on: windows-2019
    strategy:
      matrix:
        config: [Debug, Release]
        compiler: [cl, clang]
        exceptions: ["ON", "OFF"]
    steps:
    - uses: actions/checkout@v2
    - name: CMake (cl)
      if: matrix.compiler == 'cl'
      run: cmake -B ${{github.workspace}}/build -G "Visual Studio 16 2019" -DCOIL_COMPILATION_TESTS=ON -DCOIL_CATCH_EXCEPTIONS=${{matrix.exceptions}} -DCOIL_RUNTIME_TESTS=ON -DCOIL_EXAMPLES=ON -DCMAKE_TRY_COMPILE_CONFIGURATION=${{matrix.config}}
    - name: CMake (clang)
      if: matrix.compiler == 'clang'
      run: cmake -B ${{github.workspace}}/build -G "Visual Studio 16 2019" -T ClangCL -DCOIL_COMPILATION_TESTS=ON -DCOIL_CATCH_EXCEPTIONS=${{matrix.exceptions}} -DCOIL_RUNTIME_TESTS=ON -DCOIL_EXAMPLES=ON -DCMAKE_TRY_COMPILE_CONFIGURATION=${{matrix.config}}
    - name: Build
      run: cmake --build ${{github.workspace}}/build --config ${{matrix.config}} --parallel 10
    - name: CTest
      working-directory: ${{github.workspace}}/build
      run: ctest -j 10 -C ${{matrix.config}}
      
  msvc2022-ctest:
    runs-on: windows-2022
    strategy:
      matrix:
        config: [Debug, Release]
        compiler: [cl, clang]
        exceptions: ["ON", "OFF"]
    steps:
    - uses: actions/checkout@v2
    - name: CMake (cl)
      if: matrix.compiler == 'cl'
      run: cmake -B ${{github.workspace}}/build -G "Visual Studio 17 2022" -DCOIL_COMPILATION_TESTS=ON -DCOIL_CATCH_EXCEPTIONS=${{matrix.exceptions}} -DCOIL_RUNTIME_TESTS=ON -DCOIL_EXAMPLES=ON -DCMAKE_TRY_COMPILE_CONFIGURATION=${{matrix.config}}
    - name: CMake (clang)
      if: matrix.compiler == 'clang'
      run: cmake -B ${{github.workspace}}/build -G "Visual Studio 17 2022" -T ClangCL -DCOIL_COMPILATION_TESTS=ON -DCOIL_CATCH_EXCEPTIONS=${{matrix.exceptions}} -DCOIL_RUNTIME_TESTS=ON -DCOIL_EXAMPLES=ON -DCMAKE_TRY_COMPILE_CONFIGURATION=${{matrix.config}}
    - name: Build
      run: cmake --build ${{github.workspace}}/build --config ${{matrix.config}} --parallel 10
    - name: CTest
      working-directory: ${{github.workspace}}/build
      run: ctest -j 10 -C ${{matrix.config}}
    - name: Setup OpenCppCoverage
      if: matrix.compiler == 'cl' && matrix.config == 'Debug'
      run: |
        choco install OpenCppCoverage -y
        echo "C:\Program Files\OpenCppCoverage" >> $env:GITHUB_PATH
    - name: Generate code coverage report
      if: matrix.compiler == 'cl' && matrix.config == 'Debug'
      shell: cmd
      run: OpenCppCoverage.exe --sources ${{github.workspace}}\include --sources ${{github.workspace}}\src --export_type cobertura:Codecov.xml --excluded_line_regex ".*@NOCOVERAGE.*" -- ${{github.workspace}}\build\tests\runtime\${{matrix.config}}\cmake_tests.exe
    - name: Upload report to Codecov
      if: matrix.compiler == 'cl' && matrix.config == 'Debug'
      uses: codecov/codecov-action@v1.3.2
      with:
        files: ./Codecov.xml
        fail_ci_if_error: true
        functionalities: fix

  msvc2019-compilation:
    runs-on: windows-2019
    strategy:
      matrix:
        bindings: [COIL, MANUAL]
    steps:
    - uses: actions/checkout@v2
    - name: Cmake
      run: cmake -B ${{github.workspace}}/build -G "Visual Studio 16 2019" -DCOIL_COMPILE_TIME=ON -DCOIL_COMPILE_TIME_WITH_${{ matrix.bindings }}=ON
    - name: Build
      run: cmake --build ${{github.workspace}}/build --config Debug --parallel 10

  msvc2022-compilation:
    runs-on: windows-2022
    strategy:
      matrix:
        bindings: [COIL, MANUAL]
    steps:
    - uses: actions/checkout@v2
    - name: Cmake
      run: cmake -B ${{github.workspace}}/build -G "Visual Studio 17 2022" -DCOIL_COMPILE_TIME=ON -DCOIL_COMPILE_TIME_WITH_${{ matrix.bindings }}=ON
    - name: Build
      run: cmake --build ${{github.workspace}}/build --config Debug --parallel 10
