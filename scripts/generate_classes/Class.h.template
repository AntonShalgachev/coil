\#pragma once

// Generated with seed '$seed'

#if $has_bindings
\#include "../../Common.h"
#end if

#for $include in $includes
\#include "${include}.h"
#end for

class $name
{
public:
    void work();

#if $has_bindings
\#ifdef DEBUG_BINDINGS
    void registerBindings(GeneralBindings& bindings);
\#endif

\#ifdef MANUAL_DEBUG_BINDINGS
    void registerBindings(DumbBindings& bindings);
\#endif
#end if

    static std::optional<float> workInternally(std::vector<std::string> const& values);

private:
#for $method in $methods
    #echo $return_type($method) # ${method.name}($combine($method.args));
#end for

#for $member_variable in $member_variables
    $member_variable.type $member_variable.name{};
#end for

#for $function in $functions
    static #echo $return_type($function) # ${function.name}($combine($function.args));
#end for

#for $variable in $variables
    inline static $variable.type $variable.name{};
#end for
#if $has_bindings

\#ifdef MANUAL_DEBUG_BINDINGS
#for $method in $methods
    std::string ${method.name}Command(std::vector<std::string> const& arguments);
#end for

#for $member_variable in $member_variables
    std::string ${member_variable.name}Command(std::vector<std::string> const& arguments);
#end for

#for $function in $functions
    static std::string ${function.name}Command(std::vector<std::string> const& arguments);
#end for

#for $variable in $variables
    static std::string ${variable.name}Command(std::vector<std::string> const& arguments);
#end for
\#endif
#end if
};
