\#include "${name}.h"

void $name::work()
{
    std::vector<std::string> strings;
    std::random_device rd;
    std::uniform_real_distribution<float> dist{-10.0f, 10.0f};

    for (auto i = 0; i < 100; i++)
        strings.push_back(std::to_string(dist(rd)));

    auto result = workInternally(strings);
    if (result)
        std::cout << *result << std::endl;
    else
        std::cout << "null" << std::endl;

    // To trigger some template instantiations
    std::unordered_map<std::string_view, std::map<double, float>> functors;
    functors.insert_or_assign("foo", std::map<double, float>{});
    auto& innerMap = functors["bar"];
    innerMap.insert_or_assign(3.14, 3.14f);
}

#if $has_bindings
\#ifdef DEBUG_BINDINGS
void $name::registerBindings(GeneralBindings& bindings)
{
#for $method in $methods
    ::bind<$name>(bindings, "${method.name}", &$name::${method.name});
#end for

#for $variable in $member_variables
    ::bind<$name>(bindings, "${variable.name}", &${name}::${variable.name});
#end for

#for $function in $functions
    bindings["${name}_${function.name}"] = [](coil::Context context, coil::NamedArgs args, $combine($function.args))
    {
        context.reportError("Task failed successfully");
        args.get("key");
        args.get<$function.args[0]>("key");
        args.get<$function.args[0]>("key", context, coil::NamedArgs::ArgType::Optional);
        return $name::${function.name}(#echo ', '.join($arg_names($method.args))#);
    };
#end for

#for $variable in $variables
    bindings["${name}_${variable.name}"] = &${name}::${variable.name};
#end for
}
\#endif
#end if

std::optional<float> $name::workInternally(std::vector<std::string> const& values)
{
    float res = 0.0f;
    for (std::string const& s : values)
    {
        float value = 0.0f;
        std::stringstream ss{ s };
        if (!(ss >> value))
            return {};
        res += value;
    }

    std::stringstream ss;
    ss << res;

    std::string str = ss.str();

    float result = 0.0f;
    std::from_chars(str.data(), str.data() + str.size(), result);

    return result;
}

#for $method in $methods
#if 'return_index' in $method then $method.args[$method.return_index] else 'void' # $name::${method.name}($combine($method.args))
{
    #if len($method.args) > 0
    std::cout << #echo ' << '.join($arg_names($method.args))#;
    #end if
    
    std::vector<std::string> strings;
    std::random_device rd;
    std::uniform_real_distribution<float> dist{-10.0f, 10.0f};

    for (auto i = 0; i < 100; i++)
        strings.push_back(std::to_string(dist(rd)));

    auto result = workInternally(strings);
    if (result)
        std::cout << *result << std::endl;
    else
        std::cout << "null" << std::endl;

    #if 'return_index' in $method
    return #echo $arg_names($method.args)[$method.return_index]#;
    #end if
}
#end for

#for $function in $functions
#if 'return_index' in $function then $function.args[$function.return_index] else 'void' # $name::${function.name}($combine($function.args))
{
    #if len($function.args) > 0
    std::cout << #echo ' << '.join($arg_names($function.args))#;
    #end if
    
    std::vector<std::string> strings;
    std::random_device rd;
    std::uniform_real_distribution<float> dist{-10.0f, 10.0f};

    for (auto i = 0; i < 100; i++)
        strings.push_back(std::to_string(dist(rd)));

    auto result = workInternally(strings);
    if (result)
        std::cout << *result << std::endl;
    else
        std::cout << "null" << std::endl;

    #if 'return_index' in $function
    return #echo $arg_names($function.args)[$function.return_index]#;
    #end if
}
#end for
