\#include "${name}.h"

void $name::work()
{
    std::vector<std::string> strings;
    std::random_device rd;
    std::uniform_real_distribution<float> dist{-10.0f, 10.0f};

    for (auto i = 0; i < 100; i++)
        strings.push_back(std::to_string(dist(rd)));

    auto result = workInternally(strings);
    if (result)
        std::cout << *result << std::endl;
    else
        std::cout << "null" << std::endl;

    // To trigger some template instantiations
    std::unordered_map<std::string_view, std::map<double, float>> functors;
    functors.insert_or_assign("foo", std::map<double, float>{});
    auto& innerMap = functors["bar"];
    innerMap.insert_or_assign(3.14, 3.14f);
}

#if $has_bindings
\#if USE_COIL
void $name::registerBindings(coil::Bindings& bindings)
{
#for $method in $methods
    bindings["${method.name}"] = coil::bind(&$name::${method.name}, this);
#end for

#for $variable in $member_variables
    bindings["${variable.name}"] = coil::variable(&${variable.name});
#end for

#for $function in $functions
    bindings["${name}_${function.name}"] = [](coil::Context context, $combine($function.args))
    {
        context.reportError("Task failed successfully");
        auto& args = context.namedArgs();
        args.get("key");
        args.get<$function.args[0]>("key");
        args.getOrReport<$function.args[0]>("key", coil::NamedArgs::ArgType::Optional);
        return $name::${function.name}(#echo ', '.join($arg_names($function.args))#);
    };
#end for

#for $variable in $variables
    bindings["${name}_${variable.name}"] = coil::variable(&${name}::${variable.name});
#end for
}
\#endif

\#if USE_MANUAL
void ${name}::registerBindings(DumbBindings& bindings)
{
#for $method in $methods
    bindings.registerCommand("${name}_${method.name}", [this](auto const& args) { return ${method.name}Command(args); });
#end for

#for $member_variable in $member_variables
    bindings.registerCommand("${name}_${member_variable.name}", [this](auto const& args) { return ${member_variable.name}Command(args); });
#end for

#for $function in $functions
    bindings.registerCommand("${name}_${function.name}", ${name}::${function.name}Command);
#end for

#for $variable in $variables
    bindings.registerCommand("${name}_${variable.name}", ${name}::${variable.name}Command);
#end for
}
\#endif
#end if

std::optional<float> $name::workInternally(std::vector<std::string> const& values)
{
    float res = 0.0f;
    for (std::string const& s : values)
    {
        float value = 0.0f;
        std::stringstream ss{ s };
        if (!(ss >> value))
            return {};
        res += value;
    }

    std::stringstream ss;
    ss << res;

    std::string str = ss.str();

    float result = 0.0f;
    std::from_chars(str.data(), str.data() + str.size(), result);

    return result;
}

#for $method in $methods
#echo $return_type($method) # $name::${method.name}($combine($method.args))
{
    #if len($method.args) > 0
    std::cout << #echo ' << '.join($arg_names($method.args))#;
    #end if
    
    std::vector<std::string> strings;
    std::random_device rd;
    std::uniform_real_distribution<float> dist{-10.0f, 10.0f};

    for (auto i = 0; i < 100; i++)
        strings.push_back(std::to_string(dist(rd)));

    auto result = workInternally(strings);
    if (result)
        std::cout << *result << std::endl;
    else
        std::cout << "null" << std::endl;

    #if 'return_index' in $method
    return #echo $arg_names($method.args)[$method.return_index]#;
    #end if
}
#end for

#for $function in $functions
#echo $return_type($function) # $name::${function.name}($combine($function.args))
{
    #if len($function.args) > 0
    std::cout << #echo ' << '.join($arg_names($function.args))#;
    #end if
    
    std::vector<std::string> strings;
    std::random_device rd;
    std::uniform_real_distribution<float> dist{-10.0f, 10.0f};

    for (auto i = 0; i < 100; i++)
        strings.push_back(std::to_string(dist(rd)));

    auto result = workInternally(strings);
    if (result)
        std::cout << *result << std::endl;
    else
        std::cout << "null" << std::endl;

    #if 'return_index' in $function
    return #echo $arg_names($function.args)[$function.return_index]#;
    #end if
}
#end for
#if $has_bindings

////////////////////////////////////////////////////////////////////////////////////////////

\#if USE_MANUAL

#for $method in $methods
std::string ${name}::${method.name}Command(std::vector<std::string> const& arguments)
{
    if (arguments.size() != #echo len($method.args) #)
    {
        std::cout << "Wrong number of arguments!" << std::endl;
        return {};
    }

    #for $i in range(len($method.args))
    $method.args[$i] arg${i}{};
    if (!tryConvert(arguments[${i}], arg${i}))
    {
        std::cout << "Failed to convert argument ${i}!" << std::endl;
        return {};
    }
    #end for

    #if 'return_index' in $method
    auto returnValue = ${method.name}(#echo ', '.join($arg_names($method.args)) #);
    return std::to_string(returnValue);
    #else
    ${method.name}(#echo ', '.join($arg_names($method.args)) #);
    return {};
    #end if
}
#end for

#for $member_variable in $member_variables
std::string ${name}::${member_variable.name}Command(std::vector<std::string> const& arguments)
{
    if (arguments.size() > 1)
    {
        std::cout << "Wrong number of arguments!" << std::endl;
        return {};
    }

    if (arguments.size() == 1)
    {
        ${member_variable.type} newValue;
        if (!tryConvert(arguments[0], newValue))
        {
            std::cout << "Failed to convert argument!" << std::endl;
            return {};
        }

        ${member_variable.name} = newValue;
    }

    return std::to_string(${member_variable.name});
}
#end for

#for $function in $functions
std::string ${name}::${function.name}Command(std::vector<std::string> const& arguments)
{
    if (arguments.size() != #echo len($function.args) #)
    {
        std::cout << "Wrong number of arguments!" << std::endl;
        return {};
    }

    #for $i in range(len($function.args))
    $function.args[$i] arg${i}{};
    if (!tryConvert(arguments[${i}], arg${i}))
    {
        std::cout << "Failed to convert argument ${i}!" << std::endl;
        return {};
    }
    #end for

    #if 'return_index' in $function
    auto returnValue = ${function.name}(#echo ', '.join($arg_names($function.args)) #);
    return std::to_string(returnValue);
    #else
    ${function.name}(#echo ', '.join($arg_names($function.args)) #);
    return {};
    #end if
}
#end for

#for $variable in $variables
std::string ${name}::${variable.name}Command(std::vector<std::string> const& arguments)
{
    if (arguments.size() > 1)
    {
        std::cout << "Wrong number of arguments!" << std::endl;
        return {};
    }

    if (arguments.size() == 1)
    {
        ${variable.type} newValue;
        if (!tryConvert(arguments[0], newValue))
        {
            std::cout << "Failed to convert argument!" << std::endl;
            return {};
        }

        ${variable.name} = newValue;
    }

    return std::to_string(${variable.name});
}
#end for

#endif
#end if
