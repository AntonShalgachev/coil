\#include "${name}.h"
\#include <sstream>
\#include <iostream>
\#include <random>

void $name::work()
{
    std::vector<std::string> strings;
    std::random_device rd;
    std::uniform_real_distribution<float> dist{-10.0f, 10.0f};

    for (auto i = 0; i < 100; i++)
        strings.push_back(std::to_string(dist(rd)));

    auto result = workInternally(strings);
    if (result)
        std::cout << *result << std::endl;
    else
        std::cout << "null" << std::endl;
}

\#ifdef DEBUG_BINDINGS
void $name::registerBindings(GeneralBindings& bindings)
{
\#ifdef USE_OBJECTS
#for $method in $methods
    ::bind<$name>(bindings, "${method.name}", &$name::${method.name});
#end for
\#else
#for $method in $methods
    bindings["${name}_${method.name}"] = &ns_$name::${method.name};
#end for
\#endif
}
\#endif

std::optional<float> $name::workInternally(std::vector<std::string> const& values)
{
    float res = 0.0f;
    for (std::string const& s : values)
    {
        float value = 0.0f;
        std::stringstream ss{ s };
        if (!(ss >> value))
            return {};
        res += value;
    }

    return res;
}

#for $method in $methods
#if 'return_index' in $method then $method.args[$method.return_index] else 'void' # $name::${method.name}($combine($method.args))
{
    #if len($method.args) > 0
    std::cout << #echo ' << '.join($arg_names($method.args))#;
    #end if
    
    std::vector<std::string> strings;
    std::random_device rd;
    std::uniform_real_distribution<float> dist{-10.0f, 10.0f};

    for (auto i = 0; i < 100; i++)
        strings.push_back(std::to_string(dist(rd)));

    auto result = workInternally(strings);
    if (result)
        std::cout << *result << std::endl;
    else
        std::cout << "null" << std::endl;

    #if 'return_index' in $method
    return #echo $arg_names($method.args)[$method.return_index]#;
    #end if
}
#end for

#for $method in $methods
#if 'return_index' in $method then $method.args[$method.return_index] else 'void' # ns_$name::${method.name}($combine($method.args))
{
    #if len($method.args) > 0
    std::cout << #echo ' << '.join($arg_names($method.args))#;
    #end if
    
    std::vector<std::string> strings;
    std::random_device rd;
    std::uniform_real_distribution<float> dist{-10.0f, 10.0f};

    for (auto i = 0; i < 100; i++)
        strings.push_back(std::to_string(dist(rd)));

    auto result = $name::workInternally(strings);
    if (result)
        std::cout << *result << std::endl;
    else
        std::cout << "null" << std::endl;

    #if 'return_index' in $method
    return #echo $arg_names($method.args)[$method.return_index]#;
    #end if
}
#end for
